//insertion and deletion in singly linkedlist
#include<bits/stdc++.h>
using namespace std;

struct node
{
    int data;
	node* next;	
};

void insert_beg(node* &head, int data)
{
	node* nptr = new node();
	nptr->data = data;
	nptr->next = head;
	head = nptr;
}

void insert_atend(node* head, int data)
{
	node* nptr = new node();
	nptr->data = data;
	nptr->next = NULL;

	if (head == NULL)
	{
		head = nptr;
	}
	else
	{
		node* temp = head;
		while (temp->next != NULL)
		{
			temp = temp->next;
		}
		temp->next = nptr;
	}
}

void insert_at_position(node* head, int data, int position)
{
	node* nptr = new node();
	nptr->data = data;

	if (head == NULL)
	{
		cout << "there is no specific position for insertion in this linkedlist ";
	}
	else
	{
		node* ptr = head;
		node* pptr = NULL;

		while (ptr != NULL && ptr->data != position)
		{
			pptr = ptr;
			ptr = ptr->next;
		}

		if (ptr == NULL)
		{
			cout << "Position not found in the linked list." << endl;
		}
		else
		{
			nptr->next = ptr;
			if (pptr != NULL)
			{
				pptr->next = nptr;
			}
			else
			{
				head = nptr;
			}
		}
	}
}
void deletion_node(node* &head,int pos)
{
	//deleting first node
	if(pos==1)
	{
		node* temp=head;
		head=head->next;
		temp->next=NULL;
		delete temp;
	}//deleting other node
	else
	{
		node* ptr=head;
		node* pptr=NULL;
		int cnt=1;
		while(cnt<pos)
		{
			pptr=ptr;
			ptr=ptr->next;
			cnt++;
			
		}
		pptr->next=ptr->next;
		ptr->next=NULL;
		delete ptr;
		
	}
	
}

void print_linkedlist(node* head)
{
	node* temp = head;
	while (temp != NULL)
	{
		cout << temp->data << " ";
		temp = temp->next;
	}
	cout << endl;
}

int main()
{
	node* head = new node();
	head->data = 20;
	print_linkedlist(head);

	insert_beg(head, 10);
	print_linkedlist(head);

	insert_atend(head, 30);
	print_linkedlist(head);

	insert_atend(head, 40);
	print_linkedlist(head);

	insert_atend(head, 50);
	print_linkedlist(head);

	insert_at_position(head, 25, 40);
	print_linkedlist(head);
	
	cout<<"after deletion"<<endl;
	deletion_node(head,3);
		print_linkedlist(head);
	

	return 0;
}


//doubly linkedlist
//doubly linkedlist
#include<bits/stdc++.h>
using namespace std;
class node{
	public:
		int data;
		node *prev;
		node *next;
	node(int d)
	{
		this->data=d;
		this->prev=NULL;
		this->next=NULL;
	}
};
//length of doubly linkedlist
int getlength(node* head)
{
	node* temp=head;
	int length=0;
	while(temp!=NULL)
	{
		length++;
		
		temp=temp->next;
	}
	
	return length;
}
//traversing a doubly linkedlist
void print(node* head)
{
	node* temp=head;
	while(temp!=NULL)
	{
		cout<<temp->data<<" ";
		
		temp=temp->next;
	}
	
	cout<<endl;
}

	void insertathead(node* &head,int d)
	{
		if(head==NULL)
		{
			node* nptr= new node(d);
			nptr->next=NULL;
			nptr->prev=NULL;
			head=nptr;
		}
		else
		{
			node* nptr= new node(d);
			nptr->next=head;
			head->prev=nptr;
			nptr->prev=NULL;
			head=nptr;
		}
		
	}
	void insertattail(node* &tail,int d)
	{
		node* nptr=new node(d); 
		tail->next=nptr;
		nptr->prev=tail;
		tail=nptr;
	}
	void insetatmiddle(node* &head,int d, int pos)
	{
		node* nptr=new node(d);
		node* ptr=head;
		 int cnt=1;
		 while(cnt<pos-1)
		 {
		 	ptr=ptr->next;
		 	cnt++;
		 }
		 nptr->next=ptr->next;
		 ptr->next->prev=nptr;
		 ptr->next=nptr;
		 nptr->prev=ptr;
		 
		 
	}
int main()
{
	node* node1= new node(10);
	node* head=node1;
	node* tail=node1;
	print(head);
	insertathead(head,11);
	print(head);
	insertathead(head,13);
	print(head);
	insertathead(head,15);
	print(head);
	insertathead(head,17);
	print(head);
	insertattail(tail,9);
	print(head);
    insetatmiddle(head,22,3);
    print(head);
	
	
}
